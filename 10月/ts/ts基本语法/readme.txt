React组件通信如何实现?
    React组件间通信：
    父组件向子组件通信：通过传递props,子组件接收
    子组件向父组件通信：可以通过props+回调函数，父组件传递props，此时props的上下文为父组件函数，子组件可以调用这个函数
    把信息当做函数的参数传递过去
    兄弟之间通信：可以先找到这两个节点共有的父节点通过上面两个进行通信
    跨级通信：可以通过context上下文，主要为了共享全局数据
    发布订阅模式：发布者发布事件，订阅者监听事件作出反应，可以引入event模块
    全局状态管理工具：redux、Mobx维持全局的状态中心store
setState是同步还是异步?
        有时表现出异步，有时表现出同步
        1、它只是在合成事件和钩子函数中是异步的，在原生事件和setTimeout中是同步的
        2、但是他的异步并不是真正意义的异步(内部执行的仍是同步代码)，它只是在合成事件和钩子函数的调用在更新之前，
        导致没法拿到更新后的值，想要拿到更新后的值：
                1、可以通过写一个函数，第一个参数为更新前的值 
                2、可以通过嵌套，函数的第二个参数为回调函数
        3、在进行批量更新也是异步，在原生事件和setTimeout中不会批量更新，要是对同一个值进行多次的
        更新，会进行覆盖，取最后一次执行
React的生命周期?
    在新版本中废弃了render之前的钩子函数：componentWillMount、componentWillReceiveProps、componentWillUnmount
    （并未删除），多了两个getDeviredStateFromProps、getSnapshotBeforeUpdate
   主要分三个阶段：挂在阶段、更新阶段、卸载阶段
React的请求应该放在哪个阶段?
    应该放在componentDidmounted中，不应该放在componentWillmount中，因为在里面会被请求两次，客户端一次，服务端一次，
    造成多余的请求，并且在react16版本后，可能会在一次渲染中调用多次；也不会避免造成的白屏问题，
    因为渲染组件时并不会等componentWillmount完成后再进行其他工作，会继续render还是会造成白屏
    